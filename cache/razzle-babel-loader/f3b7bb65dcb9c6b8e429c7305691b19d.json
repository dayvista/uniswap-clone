{"ast":null,"code":"import _asyncToGenerator from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport _regeneratorRuntime from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { useAppSelector as useSelector, useAppDispatch as useDispatch } from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\"; // uses Kovan testnet (chainId 42)\n\nvar injectedConnector = new InjectedConnector({\n  supportedChainIds: [42]\n});\n\nvar Wallet = function Wallet() {\n  var _useWeb3React = useWeb3React(),\n      chainId = _useWeb3React.chainId,\n      account = _useWeb3React.account,\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active,\n      library = _useWeb3React.library;\n\n  var balance = useSelector(function (state) {\n    return state.walletData.balance;\n  });\n  var dispatch = useDispatch();\n\n  var onClick = function onClick() {\n    activate(injectedConnector);\n  };\n\n  useEffect(function () {\n    if (library) {\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var newBalance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = formatEther;\n                _context.next = 3;\n                return library.getBalance(account, \"latest\");\n\n              case 3:\n                _context.t1 = _context.sent;\n                newBalance = (0, _context.t0)(_context.t1);\n\n                if (newBalance !== balance) {\n                  dispatch(setBalance(newBalance));\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    } else {\n      dispatch(setBalance(null));\n    }\n  }, [library]);\n  useEffect(function () {\n    console.log(balance);\n  }, [balance]);\n  return __jsx(React.Fragment, null, !active ? __jsx(\"button\", {\n    style: {\n      fontWeight: 500,\n      background: \"#e6f7ff\",\n      padding: \"10px 36px\",\n      cursor: \"pointer\",\n      border: \"none\",\n      borderRadius: \"10px\",\n      fontFamily: \"IBM Plex Mono, monospace\",\n      fontSize: \"16px\",\n      justifySelf: \"flex-end\",\n      width: \"207px\",\n      height: \"fit-content\"\n    },\n    onClick: onClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Connect Wallet\") : __jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"314px\",\n      height: \"40px\",\n      justifySelf: \"flex-end\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      zIndex: 0,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: \"4px 37px 4px 20px\",\n      border: \"4px solid #E6F7FF\",\n      borderRadius: \"10px\",\n      height: balance ? \"auto\" : \"fit-content\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, balance ? __jsx(\"p\", {\n    style: {\n      fontSize: \"16px\",\n      lineHeight: \"24px\",\n      color: \"rgba(0, 0, 0, 0.85)\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, parseInt(balance), \" ETH\") : null), __jsx(\"div\", {\n    style: {\n      marginLeft: \"auto\",\n      zIndex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Wallet;","map":{"version":3,"sources":["/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx"],"names":["React","useEffect","useWeb3React","InjectedConnector","formatEther","useAppSelector","useSelector","useAppDispatch","useDispatch","setBalance","injectedConnector","supportedChainIds","Wallet","chainId","account","activate","active","library","balance","state","walletData","dispatch","onClick","getBalance","newBalance","console","log","fontWeight","background","padding","cursor","border","borderRadius","fontFamily","fontSize","justifySelf","width","height","position","zIndex","display","justifyContent","alignItems","lineHeight","color","parseInt","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport {\n  useAppSelector as useSelector,\n  useAppDispatch as useDispatch,\n} from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\";\n\n// uses Kovan testnet (chainId 42)\nconst injectedConnector = new InjectedConnector({ supportedChainIds: [42] });\n\nconst Wallet = () => {\n  const { chainId, account, activate, active, library } =\n    useWeb3React<Web3Provider>();\n\n  const balance = useSelector((state) => state.walletData.balance);\n\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    activate(injectedConnector);\n  };\n\n  useEffect(() => {\n    if (library) {\n      (async () => {\n        const newBalance = formatEther(\n          await library.getBalance(account, \"latest\")\n        );\n\n        if (newBalance !== balance) {\n          dispatch(setBalance(newBalance));\n        }\n      })();\n    } else {\n      dispatch(setBalance(null));\n    }\n  }, [library]);\n\n  useEffect(() => {\n    console.log(balance);\n  }, [balance]);\n\n  return (\n    <>\n      {!active ? (\n        <button\n          style={{\n            fontWeight: 500,\n            background: \"#e6f7ff\",\n            padding: \"10px 36px\",\n            cursor: \"pointer\",\n            border: \"none\",\n            borderRadius: \"10px\",\n            fontFamily: \"IBM Plex Mono, monospace\",\n            fontSize: \"16px\",\n            justifySelf: \"flex-end\",\n            width: \"207px\",\n            height: \"fit-content\",\n          }}\n          onClick={onClick}\n        >\n          Connect Wallet\n        </button>\n      ) : (\n        <div\n          style={{\n            position: \"relative\",\n            width: \"314px\",\n            height: \"40px\",\n            justifySelf: \"flex-end\",\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              zIndex: 0,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: \"4px 37px 4px 20px\",\n              border: \"4px solid #E6F7FF\",\n              borderRadius: \"10px\",\n              height: balance ? \"auto\" : \"fit-content\",\n            }}\n          >\n            {balance ? (\n              <p\n                style={{\n                  fontSize: \"16px\",\n                  lineHeight: \"24px\",\n                  color: \"rgba(0, 0, 0, 0.85)\",\n                }}\n              >\n                {parseInt(balance)} ETH\n              </p>\n            ) : null}\n          </div>\n          <div style={{ marginLeft: \"auto\", zIndex: 1 }}></div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}