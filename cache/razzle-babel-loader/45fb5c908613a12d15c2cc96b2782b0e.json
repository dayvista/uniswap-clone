{"ast":null,"code":"import _asyncToGenerator from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/regenerator\";\nimport Web3 from \"web3\";\nvar rpcURL = \"https://kovan.infura.io/v3/\".concat(process.env.RAZZLE_INFURA_PROJECT_ID);\nvar web3 = new Web3(rpcURL);\nexport var removeDuplicateObjectFromArray = function removeDuplicateObjectFromArray(arr, key) {\n  var check = {};\n  var filteredArr = [];\n  arr.forEach(function (obj) {\n    if (!check[obj[key]]) {\n      check[obj[key]] = true;\n      filteredArr.push(obj);\n    }\n  });\n  return filteredArr;\n};\nexport var getErc20Balance = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAddress, walletAddress) {\n    var balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return contract.methods.balanceOf(walletAddress).call();\n\n          case 2:\n            balance = _context.sent;\n            return _context.abrupt(\"return\", balance);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getErc20Balance(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/liam/Documents/Code/paladin/test/src/lib/utils.ts"],"names":["Web3","rpcURL","process","env","RAZZLE_INFURA_PROJECT_ID","web3","removeDuplicateObjectFromArray","arr","key","check","filteredArr","forEach","obj","push","getErc20Balance","tokenAddress","walletAddress","contract","methods","balanceOf","call","balance"],"mappings":";;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,IAAMC,MAAM,wCAAiCC,OAAO,CAACC,GAAR,CAAYC,wBAA7C,CAAZ;AACA,IAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASC,MAAT,CAAb;AAEA,OAAO,IAAMK,8BAA8B,GAAG,SAAjCA,8BAAiC,CAC5CC,GAD4C,EAE5CC,GAF4C,EAGpC;AACR,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,GAAG,CAACI,OAAJ,CAAY,UAACC,GAAD,EAAS;AACnB,QAAI,CAACH,KAAK,CAACG,GAAG,CAACJ,GAAD,CAAJ,CAAV,EAAsB;AACpBC,MAAAA,KAAK,CAACG,GAAG,CAACJ,GAAD,CAAJ,CAAL,GAAkB,IAAlB;AAEAE,MAAAA,WAAW,CAACG,IAAZ,CAAiBD,GAAjB;AACD;AACF,GAND;AAQA,SAAOF,WAAP;AACD,CAjBM;AAmBP,OAAO,IAAMI,eAAe;AAAA,sEAAG,iBAC7BC,YAD6B,EAE7BC,aAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIPC,QAAQ,CAACC,OAAT,CAAiBC,SAAjB,CAA2BH,aAA3B,EAA0CI,IAA1C,EAJO;;AAAA;AAIvBC,YAAAA,OAJuB;AAAA,6CAMtBA,OANsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfP,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import { abi } from \"../lib/abi/ierc20\";\nimport Web3 from \"web3\";\nconst rpcURL = `https://kovan.infura.io/v3/${process.env.RAZZLE_INFURA_PROJECT_ID}`;\nconst web3 = new Web3(rpcURL);\n\nexport const removeDuplicateObjectFromArray = <T>(\n  arr: object[],\n  key: string\n): T[] => {\n  const check = {};\n\n  const filteredArr = [];\n\n  arr.forEach((obj) => {\n    if (!check[obj[key]]) {\n      check[obj[key]] = true;\n\n      filteredArr.push(obj);\n    }\n  });\n\n  return filteredArr;\n};\n\nexport const getErc20Balance = async (\n  tokenAddress: string,\n  walletAddress: string\n) => {\n  const balance = await contract.methods.balanceOf(walletAddress).call();\n\n  return balance;\n};\n"]},"metadata":{},"sourceType":"module"}