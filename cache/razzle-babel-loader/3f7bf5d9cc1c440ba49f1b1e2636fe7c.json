{"ast":null,"code":"import _asyncToGenerator from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport _regeneratorRuntime from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { useAppSelector as useSelector, useAppDispatch as useDispatch } from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\"; // uses Kovan testnet (chainId 42)\n\nvar injectedConnector = new InjectedConnector({\n  supportedChainIds: [42]\n});\n\nvar Wallet = function Wallet() {\n  var _useWeb3React = useWeb3React(),\n      chainId = _useWeb3React.chainId,\n      account = _useWeb3React.account,\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active,\n      library = _useWeb3React.library;\n\n  var balance = useSelector(function (state) {\n    return state.walletData.balance;\n  });\n  var dispatch = useDispatch();\n\n  var onClick = function onClick() {\n    activate(injectedConnector);\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = dispatch;\n              _context.t1 = setBalance;\n              _context.t2 = formatEther;\n              _context.next = 5;\n              return library.getBalance(account, \"latest\");\n\n            case 5:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t2)(_context.t3);\n              _context.t5 = (0, _context.t1)(_context.t4);\n              (0, _context.t0)(_context.t5);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  };\n\n  useEffect(function () {\n    console.log(balance);\n  }, [balance]);\n  return __jsx(React.Fragment, null, !active ? __jsx(\"button\", {\n    style: {\n      fontWeight: 500,\n      background: \"#e6f7ff\",\n      padding: \"10px 36px\",\n      cursor: \"pointer\",\n      border: \"none\",\n      borderRadius: \"10px\",\n      fontFamily: \"IBM Plex Mono, monospace\",\n      fontSize: \"16px\",\n      justifySelf: \"flex-end\",\n      width: \"207px\",\n      height: \"fit-content\"\n    },\n    onClick: onClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Connect Wallet\") : __jsx(React.Fragment, null), __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, chainId), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, account), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, active ? \"active\" : \"inactive\"), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, balance ? balance : \"no balance\")));\n};\n\nexport default Wallet;","map":{"version":3,"sources":["/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx"],"names":["React","useEffect","useWeb3React","InjectedConnector","formatEther","useAppSelector","useSelector","useAppDispatch","useDispatch","setBalance","injectedConnector","supportedChainIds","Wallet","chainId","account","activate","active","library","balance","state","walletData","dispatch","onClick","getBalance","console","log","fontWeight","background","padding","cursor","border","borderRadius","fontFamily","fontSize","justifySelf","width","height","position","top","left"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SACEC,cAAc,IAAIC,WADpB,EAEEC,cAAc,IAAIC,WAFpB,QAGO,uBAHP;AAIA,SAASC,UAAT,QAA2B,mCAA3B,C,CAEA;;AACA,IAAMC,iBAAiB,GAAG,IAAIP,iBAAJ,CAAsB;AAAEQ,EAAAA,iBAAiB,EAAE,CAAC,EAAD;AAArB,CAAtB,CAA1B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,sBACEV,YAAY,EADd;AAAA,MAAQW,OAAR,iBAAQA,OAAR;AAAA,MAAiBC,OAAjB,iBAAiBA,OAAjB;AAAA,MAA0BC,QAA1B,iBAA0BA,QAA1B;AAAA,MAAoCC,MAApC,iBAAoCA,MAApC;AAAA,MAA4CC,OAA5C,iBAA4CA,OAA5C;;AAGA,MAAMC,OAAO,GAAGZ,WAAW,CAAC,UAACa,KAAD;AAAA,WAAWA,KAAK,CAACC,UAAN,CAAiBF,OAA5B;AAAA,GAAD,CAA3B;AAEA,MAAMG,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,MAAMc,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBP,IAAAA,QAAQ,CAACL,iBAAD,CAAR;;AAEA,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA,4BACCW,QADD;AAAA,4BAEGZ,UAFH;AAAA,4BAEcL,WAFd;AAAA;AAAA,qBAEgCa,OAAO,CAACM,UAAR,CAAmBT,OAAnB,EAA4B,QAA5B,CAFhC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAKD,GARD;;AAUAb,EAAAA,SAAS,CAAC,YAAM;AACduB,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,SACE,4BACG,CAACF,MAAD,GACC;AACE,IAAA,KAAK,EAAE;AACLU,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,UAAU,EAAE,SAFP;AAGLC,MAAAA,OAAO,EAAE,WAHJ;AAILC,MAAAA,MAAM,EAAE,SAJH;AAKLC,MAAAA,MAAM,EAAE,MALH;AAMLC,MAAAA,YAAY,EAAE,MANT;AAOLC,MAAAA,UAAU,EAAE,0BAPP;AAQLC,MAAAA,QAAQ,EAAE,MARL;AASLC,MAAAA,WAAW,EAAE,UATR;AAULC,MAAAA,KAAK,EAAE,OAVF;AAWLC,MAAAA,MAAM,EAAE;AAXH,KADT;AAcE,IAAA,OAAO,EAAEd,OAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,GAoBC,2BArBJ,EAuBE;AAAK,IAAA,KAAK,EAAE;AAAEe,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,GAAG,EAAE,KAA7B;AAAoCC,MAAAA,IAAI,EAAE;AAA1C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI1B,OAAJ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,OAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,MAAM,GAAG,QAAH,GAAc,UAAxB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,OAAO,GAAGA,OAAH,GAAa,YAAxB,CAJF,CAvBF,CADF;AAgCD,CAtDD;;AAwDA,eAAeN,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport {\n  useAppSelector as useSelector,\n  useAppDispatch as useDispatch,\n} from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\";\n\n// uses Kovan testnet (chainId 42)\nconst injectedConnector = new InjectedConnector({ supportedChainIds: [42] });\n\nconst Wallet = () => {\n  const { chainId, account, activate, active, library } =\n    useWeb3React<Web3Provider>();\n\n  const balance = useSelector((state) => state.walletData.balance);\n\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    activate(injectedConnector);\n\n    (async () => {\n      dispatch(\n        setBalance(formatEther(await library.getBalance(account, \"latest\")))\n      );\n    })();\n  };\n\n  useEffect(() => {\n    console.log(balance);\n  }, [balance]);\n\n  return (\n    <>\n      {!active ? (\n        <button\n          style={{\n            fontWeight: 500,\n            background: \"#e6f7ff\",\n            padding: \"10px 36px\",\n            cursor: \"pointer\",\n            border: \"none\",\n            borderRadius: \"10px\",\n            fontFamily: \"IBM Plex Mono, monospace\",\n            fontSize: \"16px\",\n            justifySelf: \"flex-end\",\n            width: \"207px\",\n            height: \"fit-content\",\n          }}\n          onClick={onClick}\n        >\n          Connect Wallet\n        </button>\n      ) : (\n        <></>\n      )}\n      <div style={{ position: \"absolute\", top: \"50%\", left: \"50%\" }}>\n        <p>{chainId}</p>\n        <p>{account}</p>\n        <p>{active ? \"active\" : \"inactive\"}</p>\n        <p>{balance ? balance : \"no balance\"}</p>\n      </div>\n    </>\n  );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}