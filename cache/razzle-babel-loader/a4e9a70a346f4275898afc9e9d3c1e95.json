{"ast":null,"code":"var _jsxFileName = \"/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { useAppSelector as useSelector, useAppDispatch as useDispatch } from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\"; // uses Kovan testnet (chainId 42)\n\nconst injectedConnector = new InjectedConnector({\n  supportedChainIds: [42]\n});\n\nconst Wallet = () => {\n  const {\n    chainId,\n    account,\n    activate,\n    active,\n    library\n  } = useWeb3React();\n  const balance = useSelector(state => state.walletData.balance);\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    activate(injectedConnector);\n  };\n\n  useEffect(() => {\n    if (library) {\n      (async () => {\n        const newBalance = formatEther(await library.getBalance(account, \"latest\"));\n\n        if (newBalance !== balance) {\n          dispatch(setBalance(newBalance));\n        }\n      })();\n    }\n  }, [library]);\n  useEffect(() => {\n    console.log(balance);\n  }, [balance]);\n  return __jsx(React.Fragment, null, !active ? __jsx(\"button\", {\n    style: {\n      fontWeight: 500,\n      background: \"#e6f7ff\",\n      padding: \"10px 36px\",\n      cursor: \"pointer\",\n      border: \"none\",\n      borderRadius: \"10px\",\n      fontFamily: \"IBM Plex Mono, monospace\",\n      fontSize: \"16px\",\n      justifySelf: \"flex-end\",\n      width: \"207px\",\n      height: \"fit-content\"\n    },\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Connect Wallet\") : __jsx(React.Fragment, null), __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, chainId), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, account), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, active ? \"active\" : \"inactive\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, balance ? balance : \"no balance\")));\n};\n\nexport default Wallet;","map":{"version":3,"sources":["/home/liam/Documents/Code/paladin/test/src/components/buttons/Wallet.tsx"],"names":["React","useEffect","useWeb3React","InjectedConnector","formatEther","useAppSelector","useSelector","useAppDispatch","useDispatch","setBalance","injectedConnector","supportedChainIds","Wallet","chainId","account","activate","active","library","balance","state","walletData","dispatch","onClick","newBalance","getBalance","console","log","fontWeight","background","padding","cursor","border","borderRadius","fontFamily","fontSize","justifySelf","width","height","position","top","left"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SACEC,cAAc,IAAIC,WADpB,EAEEC,cAAc,IAAIC,WAFpB,QAGO,uBAHP;AAIA,SAASC,UAAT,QAA2B,mCAA3B,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,IAAIP,iBAAJ,CAAsB;AAAEQ,EAAAA,iBAAiB,EAAE,CAAC,EAAD;AAArB,CAAtB,CAA1B;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,MAA9B;AAAsCC,IAAAA;AAAtC,MACJf,YAAY,EADd;AAGA,QAAMgB,OAAO,GAAGZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,UAAN,CAAiBF,OAA7B,CAA3B;AAEA,QAAMG,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,QAAMc,OAAO,GAAG,MAAM;AACpBP,IAAAA,QAAQ,CAACL,iBAAD,CAAR;AACD,GAFD;;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,OAAJ,EAAa;AACX,OAAC,YAAY;AACX,cAAMM,UAAU,GAAGnB,WAAW,CAC5B,MAAMa,OAAO,CAACO,UAAR,CAAmBV,OAAnB,EAA4B,QAA5B,CADsB,CAA9B;;AAIA,YAAIS,UAAU,KAAKL,OAAnB,EAA4B;AAC1BG,UAAAA,QAAQ,CAACZ,UAAU,CAACc,UAAD,CAAX,CAAR;AACD;AACF,OARD;AASD;AACF,GAZQ,EAYN,CAACN,OAAD,CAZM,CAAT;AAcAhB,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,SACE,4BACG,CAACF,MAAD,GACC;AACE,IAAA,KAAK,EAAE;AACLW,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,UAAU,EAAE,SAFP;AAGLC,MAAAA,OAAO,EAAE,WAHJ;AAILC,MAAAA,MAAM,EAAE,SAJH;AAKLC,MAAAA,MAAM,EAAE,MALH;AAMLC,MAAAA,YAAY,EAAE,MANT;AAOLC,MAAAA,UAAU,EAAE,0BAPP;AAQLC,MAAAA,QAAQ,EAAE,MARL;AASLC,MAAAA,WAAW,EAAE,UATR;AAULC,MAAAA,KAAK,EAAE,OAVF;AAWLC,MAAAA,MAAM,EAAE;AAXH,KADT;AAcE,IAAA,OAAO,EAAEf,OAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,GAoBC,2BArBJ,EAuBE;AAAK,IAAA,KAAK,EAAE;AAAEgB,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,GAAG,EAAE,KAA7B;AAAoCC,MAAAA,IAAI,EAAE;AAA1C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI3B,OAAJ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,OAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,MAAM,GAAG,QAAH,GAAc,UAAxB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,OAAO,GAAGA,OAAH,GAAa,YAAxB,CAJF,CAvBF,CADF;AAgCD,CA9DD;;AAgEA,eAAeN,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { formatEther } from \"@ethersproject/units\";\nimport {\n  useAppSelector as useSelector,\n  useAppDispatch as useDispatch,\n} from \"../../lib/redux/hooks\";\nimport { setBalance } from \"../../lib/redux/slices/walletData\";\n\n// uses Kovan testnet (chainId 42)\nconst injectedConnector = new InjectedConnector({ supportedChainIds: [42] });\n\nconst Wallet = () => {\n  const { chainId, account, activate, active, library } =\n    useWeb3React<Web3Provider>();\n\n  const balance = useSelector((state) => state.walletData.balance);\n\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    activate(injectedConnector);\n  };\n\n  useEffect(() => {\n    if (library) {\n      (async () => {\n        const newBalance = formatEther(\n          await library.getBalance(account, \"latest\")\n        );\n\n        if (newBalance !== balance) {\n          dispatch(setBalance(newBalance));\n        }\n      })();\n    }\n  }, [library]);\n\n  useEffect(() => {\n    console.log(balance);\n  }, [balance]);\n\n  return (\n    <>\n      {!active ? (\n        <button\n          style={{\n            fontWeight: 500,\n            background: \"#e6f7ff\",\n            padding: \"10px 36px\",\n            cursor: \"pointer\",\n            border: \"none\",\n            borderRadius: \"10px\",\n            fontFamily: \"IBM Plex Mono, monospace\",\n            fontSize: \"16px\",\n            justifySelf: \"flex-end\",\n            width: \"207px\",\n            height: \"fit-content\",\n          }}\n          onClick={onClick}\n        >\n          Connect Wallet\n        </button>\n      ) : (\n        <></>\n      )}\n      <div style={{ position: \"absolute\", top: \"50%\", left: \"50%\" }}>\n        <p>{chainId}</p>\n        <p>{account}</p>\n        <p>{active ? \"active\" : \"inactive\"}</p>\n        <p>{balance ? balance : \"no balance\"}</p>\n      </div>\n    </>\n  );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}