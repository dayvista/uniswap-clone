{"ast":null,"code":"import _asyncToGenerator from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/home/liam/Documents/Code/paladin/test/node_modules/@babel/runtime/regenerator\";\nimport { abi as iErc20Abi } from \"../lib/abi/ierc20\";\nimport { abi as uniswapAbi } from \"../lib/abi/uniswap\";\nimport Web3 from \"web3\";\nvar rpcURL = \"https://kovan.infura.io/v3/\".concat(process.env.RAZZLE_INFURA_PROJECT_ID);\nvar web3 = new Web3(rpcURL);\nimport { FACTORY_ADDRESS, INIT_CODE_HASH } from \"@uniswap/sdk\";\nimport { pack, keccak256 } from \"@ethersproject/solidity\";\nimport { getCreate2Address } from \"@ethersproject/address\";\nexport var removeDuplicateObjectFromArray = function removeDuplicateObjectFromArray(arr, key) {\n  var check = {};\n  var filteredArr = [];\n  arr.forEach(function (obj) {\n    if (!check[obj[key]]) {\n      check[obj[key]] = true;\n      filteredArr.push(obj);\n    }\n  });\n  return filteredArr;\n};\nexport var getErc20Balance = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAddress, walletAddress) {\n    var contract, balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contract = new web3.eth.Contract(iErc20Abi, tokenAddress);\n            _context.next = 3;\n            return contract.methods.balanceOf(walletAddress).call();\n\n          case 3:\n            balance = _context.sent;\n            return _context.abrupt(\"return\", balance);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getErc20Balance(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getExchangeRate = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(exchangeAmount, fromContractAddress, toContractAddress) {\n    var pairAddress, contract, exchangeRate;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            pairAddress = getCreate2Address(FACTORY_ADDRESS, keccak256([\"bytes\"], [pack([\"address\", \"address\"], [fromContractAddress, toContractAddress])]), INIT_CODE_HASH);\n            contract = new web3.eth.Contract(uniswapAbi, pairAddress);\n            _context2.next = 4;\n            return contract.methods.getAmountsOut(web3.utils.hexToNumberString(exchangeAmount._hex), [fromContractAddress, toContractAddress]).call();\n\n          case 4:\n            exchangeRate = _context2.sent;\n            return _context2.abrupt(\"return\", exchangeRate);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getExchangeRate(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/liam/Documents/Code/paladin/test/src/lib/utils.ts"],"names":["abi","iErc20Abi","uniswapAbi","Web3","rpcURL","process","env","RAZZLE_INFURA_PROJECT_ID","web3","FACTORY_ADDRESS","INIT_CODE_HASH","pack","keccak256","getCreate2Address","removeDuplicateObjectFromArray","arr","key","check","filteredArr","forEach","obj","push","getErc20Balance","tokenAddress","walletAddress","contract","eth","Contract","methods","balanceOf","call","balance","getExchangeRate","exchangeAmount","fromContractAddress","toContractAddress","pairAddress","getAmountsOut","utils","hexToNumberString","_hex","exchangeRate"],"mappings":";;AAAA,SAASA,GAAG,IAAIC,SAAhB,QAAiC,mBAAjC;AACA,SAASD,GAAG,IAAIE,UAAhB,QAAkC,oBAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,IAAMC,MAAM,wCAAiCC,OAAO,CAACC,GAAR,CAAYC,wBAA7C,CAAZ;AACA,IAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASC,MAAT,CAAb;AAEA,SAASK,eAAT,EAA0BC,cAA1B,QAAgD,cAAhD;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,yBAAhC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAC5CC,GAD4C,EAE5CC,GAF4C,EAGpC;AACR,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,GAAG,CAACI,OAAJ,CAAY,UAACC,GAAD,EAAS;AACnB,QAAI,CAACH,KAAK,CAACG,GAAG,CAACJ,GAAD,CAAJ,CAAV,EAAsB;AACpBC,MAAAA,KAAK,CAACG,GAAG,CAACJ,GAAD,CAAJ,CAAL,GAAkB,IAAlB;AAEAE,MAAAA,WAAW,CAACG,IAAZ,CAAiBD,GAAjB;AACD;AACF,GAND;AAQA,SAAOF,WAAP;AACD,CAjBM;AAmBP,OAAO,IAAMI,eAAe;AAAA,sEAAG,iBAC7BC,YAD6B,EAE7BC,aAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAIvBC,YAAAA,QAJuB,GAIZ,IAAIjB,IAAI,CAACkB,GAAL,CAASC,QAAb,CAAsB1B,SAAtB,EAAiCsB,YAAjC,CAJY;AAAA;AAAA,mBAMPE,QAAQ,CAACG,OAAT,CAAiBC,SAAjB,CAA2BL,aAA3B,EAA0CM,IAA1C,EANO;;AAAA;AAMvBC,YAAAA,OANuB;AAAA,6CAQtBA,OARsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfT,eAAe;AAAA;AAAA;AAAA,GAArB;AAWP,OAAO,IAAMU,eAAe;AAAA,uEAAG,kBAC7BC,cAD6B,EAE7BC,mBAF6B,EAG7BC,iBAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKvBC,YAAAA,WALuB,GAKTvB,iBAAiB,CACnCJ,eADmC,EAEnCG,SAAS,CACP,CAAC,OAAD,CADO,EAEP,CAACD,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACuB,mBAAD,EAAsBC,iBAAtB,CAAzB,CAAL,CAFO,CAF0B,EAMnCzB,cANmC,CALR;AAcvBe,YAAAA,QAduB,GAcZ,IAAIjB,IAAI,CAACkB,GAAL,CAASC,QAAb,CAAsBzB,UAAtB,EAAkCkC,WAAlC,CAdY;AAAA;AAAA,mBAgBFX,QAAQ,CAACG,OAAT,CACxBS,aADwB,CACV7B,IAAI,CAAC8B,KAAL,CAAWC,iBAAX,CAA6BN,cAAc,CAACO,IAA5C,CADU,EACyC,CAChEN,mBADgE,EAEhEC,iBAFgE,CADzC,EAKxBL,IALwB,EAhBE;;AAAA;AAgBvBW,YAAAA,YAhBuB;AAAA,8CAuBtBA,YAvBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfT,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import { abi as iErc20Abi } from \"../lib/abi/ierc20\";\nimport { abi as uniswapAbi } from \"../lib/abi/uniswap\";\nimport Web3 from \"web3\";\nconst rpcURL = `https://kovan.infura.io/v3/${process.env.RAZZLE_INFURA_PROJECT_ID}`;\nconst web3 = new Web3(rpcURL);\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { FACTORY_ADDRESS, INIT_CODE_HASH } from \"@uniswap/sdk\";\nimport { pack, keccak256 } from \"@ethersproject/solidity\";\nimport { getCreate2Address } from \"@ethersproject/address\";\n\nexport const removeDuplicateObjectFromArray = <T>(\n  arr: object[],\n  key: string\n): T[] => {\n  const check = {};\n\n  const filteredArr = [];\n\n  arr.forEach((obj) => {\n    if (!check[obj[key]]) {\n      check[obj[key]] = true;\n\n      filteredArr.push(obj);\n    }\n  });\n\n  return filteredArr;\n};\n\nexport const getErc20Balance = async (\n  tokenAddress: string,\n  walletAddress: string\n) => {\n  const contract = new web3.eth.Contract(iErc20Abi, tokenAddress);\n\n  const balance = await contract.methods.balanceOf(walletAddress).call();\n\n  return balance;\n};\n\nexport const getExchangeRate = async (\n  exchangeAmount: BigNumber,\n  fromContractAddress: string,\n  toContractAddress: string\n) => {\n  const pairAddress = getCreate2Address(\n    FACTORY_ADDRESS,\n    keccak256(\n      [\"bytes\"],\n      [pack([\"address\", \"address\"], [fromContractAddress, toContractAddress])]\n    ),\n    INIT_CODE_HASH\n  );\n\n  const contract = new web3.eth.Contract(uniswapAbi, pairAddress);\n\n  const exchangeRate = await contract.methods\n    .getAmountsOut(web3.utils.hexToNumberString(exchangeAmount._hex), [\n      fromContractAddress,\n      toContractAddress,\n    ])\n    .call();\n\n  return exchangeRate;\n};\n"]},"metadata":{},"sourceType":"module"}